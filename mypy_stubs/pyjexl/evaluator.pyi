from collections import MutableMapping
from pyjexl.exceptions import MissingTransformError as MissingTransformError
from typing import Any, Optional

class Context(MutableMapping):
    data: Any = ...
    relative_value: Any = ...
    def __init__(self, context_data: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def with_relative(self, relative_value: Any): ...

class Evaluator:
    config: Any = ...
    def __init__(self, jexl_config: Any) -> None: ...
    def evaluate(self, expression: Any, context: Optional[Any] = ...): ...
    def visit_BinaryExpression(self, exp: Any, context: Any): ...
    def visit_UnaryExpression(self, exp: Any, context: Any): ...
    def visit_Literal(self, literal: Any, context: Any): ...
    def visit_Identifier(self, identifier: Any, context: Any): ...
    def visit_ObjectLiteral(self, object_literal: Any, context: Any): ...
    def visit_ArrayLiteral(self, array_literal: Any, context: Any): ...
    def visit_Transform(self, transform: Any, context: Any): ...
    def visit_FilterExpression(self, filter_expression: Any, context: Any): ...
    def visit_ConditionalExpression(self, conditional: Any, context: Any): ...
    def generic_visit(self, expression: Any, context: Any) -> None: ...
