from collections import namedtuple
from pyjexl.analysis import ValidatingAnalyzer as ValidatingAnalyzer
from pyjexl.evaluator import Context as Context, Evaluator as Evaluator
from pyjexl.exceptions import ParseError as ParseError
from pyjexl.operators import Operator as Operator, default_binary_operators as default_binary_operators, default_unary_operators as default_unary_operators
from pyjexl.parser import Parser as Parser, jexl_grammar as jexl_grammar
from typing import Any, Optional

JEXLConfig = namedtuple('JEXLConfig', ['transforms', 'unary_operators', 'binary_operators'])

def invalidates_grammar(func: Any): ...

class JEXL:
    context: Any = ...
    config: Any = ...
    def __init__(self, context: Optional[Any] = ...) -> None: ...
    @property
    def grammar(self): ...
    def add_binary_operator(self, operator: Any, precedence: Any, func: Any) -> None: ...
    def remove_binary_operator(self, operator: Any) -> None: ...
    def add_unary_operator(self, operator: Any, func: Any) -> None: ...
    def remove_unary_operator(self, operator: Any) -> None: ...
    def add_transform(self, name: Any, func: Any) -> None: ...
    def remove_transform(self, name: Any) -> None: ...
    def transform(self, name: Optional[Any] = ...): ...
    def parse(self, expression: Any): ...
    def analyze(self, expression: Any, AnalyzerClass: Any): ...
    def validate(self, expression: Any) -> None: ...
    def evaluate(self, expression: Any, context: Optional[Any] = ...): ...
