from parsimonious import NodeVisitor
from pyjexl.exceptions import InvalidOperatorError as InvalidOperatorError
from pyjexl.operators import Operator as Operator
from typing import Any

def operator_pattern(operators: Any): ...
def jexl_grammar(jexl_config: Any): ...

class Parser(NodeVisitor):
    config: Any = ...
    def __init__(self, jexl_config: Any) -> None: ...
    def visit_expression(self, node: Any, children: Any): ...
    def visit_subexpression(self, node: Any, children: Any): ...
    def visit_binary_expression(self, node: Any, children: Any): ...
    def visit_conditional_expression(self, node: Any, children: Any): ...
    def visit_conditional_test(self, node: Any, children: Any): ...
    def visit_binary_operator(self, node: Any, children: Any): ...
    def visit_binary_operand(self, node: Any, children: Any): ...
    def visit_unary_expression(self, node: Any, children: Any): ...
    def visit_unary_operator(self, node: Any, children: Any): ...
    def visit_unary_operand(self, node: Any, children: Any): ...
    def visit_object_literal(self, node: Any, children: Any): ...
    def visit_object_key_value_list(self, node: Any, children: Any): ...
    def visit_object_key_value(self, node: Any, children: Any): ...
    def visit_array_literal(self, node: Any, children: Any): ...
    def visit_value_list(self, node: Any, children: Any): ...
    def visit_complex_value(self, node: Any, children: Any): ...
    def visit_attribute(self, node: Any, children: Any): ...
    def visit_transform(self, node: Any, children: Any): ...
    def visit_transform_arguments(self, node: Any, children: Any): ...
    def visit_filter_expression(self, node: Any, children: Any): ...
    def visit_identifier(self, node: Any, children: Any): ...
    def visit_relative_identifier(self, node: Any, children: Any): ...
    def visit_value(self, node: Any, children: Any): ...
    def visit_boolean(self, node: Any, children: Any): ...
    def visit_numeric(self, node: Any, children: Any): ...
    def visit_string(self, node: Any, children: Any): ...
    def generic_visit(self, node: Any, visited_children: Any): ...

class NodeMeta(type):
    def __new__(meta: Any, classname: Any, bases: Any, classdict: Any): ...

class Node:
    fields: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def children(self): ...
    def root(self): ...
    def contains_relative(self): ...

class BinaryExpression(Node):
    fields: Any = ...
    @property
    def children(self) -> None: ...

class UnaryExpression(Node):
    fields: Any = ...
    @property
    def children(self) -> None: ...

class Literal(Node):
    fields: Any = ...

class Identifier(Node):
    fields: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def children(self) -> None: ...

class ObjectLiteral(Node):
    fields: Any = ...

class ArrayLiteral(Node):
    fields: Any = ...

class Transform(Node):
    fields: Any = ...
    @property
    def children(self) -> None: ...

class FilterExpression(Node):
    fields: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def children(self) -> None: ...
    def contains_relative(self): ...

class ConditionalExpression(Node):
    fields: Any = ...
    @property
    def children(self) -> None: ...
