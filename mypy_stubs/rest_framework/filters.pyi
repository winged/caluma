from rest_framework.compat import coreapi as coreapi, coreschema as coreschema, distinct as distinct
from rest_framework.settings import api_settings as api_settings
from typing import Any

class BaseFilterBackend:
    def filter_queryset(self, request: Any, queryset: Any, view: Any) -> None: ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...

class SearchFilter(BaseFilterBackend):
    search_param: Any = ...
    template: str = ...
    lookup_prefixes: Any = ...
    search_title: Any = ...
    search_description: Any = ...
    def get_search_fields(self, view: Any, request: Any): ...
    def get_search_terms(self, request: Any): ...
    def construct_search(self, field_name: Any): ...
    def must_call_distinct(self, queryset: Any, search_fields: Any): ...
    def filter_queryset(self, request: Any, queryset: Any, view: Any): ...
    def to_html(self, request: Any, queryset: Any, view: Any): ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...

class OrderingFilter(BaseFilterBackend):
    ordering_param: Any = ...
    ordering_fields: Any = ...
    ordering_title: Any = ...
    ordering_description: Any = ...
    template: str = ...
    def get_ordering(self, request: Any, queryset: Any, view: Any): ...
    def get_default_ordering(self, view: Any): ...
    def get_default_valid_fields(self, queryset: Any, view: Any, context: Any = ...): ...
    def get_valid_fields(self, queryset: Any, view: Any, context: Any = ...): ...
    def remove_invalid_fields(self, queryset: Any, fields: Any, view: Any, request: Any): ...
    def filter_queryset(self, request: Any, queryset: Any, view: Any): ...
    def get_template_context(self, request: Any, queryset: Any, view: Any): ...
    def to_html(self, request: Any, queryset: Any, view: Any): ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...
