from rest_framework import ISO_8601 as ISO_8601
from rest_framework.compat import ProhibitNullCharactersValidator as ProhibitNullCharactersValidator
from rest_framework.exceptions import ErrorDetail as ErrorDetail, ValidationError as ValidationError
from rest_framework.settings import api_settings as api_settings
from rest_framework.utils import html as html, humanize_datetime as humanize_datetime, json as json, representation as representation
from rest_framework.utils.formatting import lazy_format as lazy_format
from typing import Any, Optional

class empty: ...
class BuiltinSignatureError(Exception): ...

def is_simple_callable(obj: Any): ...
def get_attribute(instance: Any, attrs: Any): ...
def set_value(dictionary: Any, keys: Any, value: Any) -> None: ...
def to_choices_dict(choices: Any): ...
def flatten_choices_dict(choices: Any): ...
def iter_options(grouped_choices: Any, cutoff: Optional[Any] = ..., cutoff_text: Optional[Any] = ...) -> None: ...
def get_error_detail(exc_info: Any): ...

class CreateOnlyDefault:
    default: Any = ...
    def __init__(self, default: Any) -> None: ...
    is_update: Any = ...
    def set_context(self, serializer_field: Any) -> None: ...
    def __call__(self): ...

class CurrentUserDefault:
    user: Any = ...
    def set_context(self, serializer_field: Any) -> None: ...
    def __call__(self): ...

class SkipField(Exception): ...

REGEX_TYPE: Any
NOT_READ_ONLY_WRITE_ONLY: str
NOT_READ_ONLY_REQUIRED: str
NOT_REQUIRED_DEFAULT: str
USE_READONLYFIELD: str
MISSING_ERROR_MESSAGE: str

class Field:
    default_error_messages: Any = ...
    default_validators: Any = ...
    default_empty_html: Any = ...
    initial: Any = ...
    read_only: Any = ...
    write_only: Any = ...
    required: Any = ...
    default: Any = ...
    source: Any = ...
    label: Any = ...
    help_text: Any = ...
    style: Any = ...
    allow_null: Any = ...
    field_name: Any = ...
    parent: Any = ...
    error_messages: Any = ...
    def __init__(self, read_only: bool = ..., write_only: bool = ..., required: Optional[Any] = ..., default: Any = ..., initial: Any = ..., source: Optional[Any] = ..., label: Optional[Any] = ..., help_text: Optional[Any] = ..., style: Optional[Any] = ..., error_messages: Optional[Any] = ..., validators: Optional[Any] = ..., allow_null: bool = ...) -> None: ...
    source_attrs: Any = ...
    def bind(self, field_name: Any, parent: Any) -> None: ...
    @property
    def validators(self): ...
    @validators.setter
    def validators(self, validators: Any) -> None: ...
    def get_validators(self): ...
    def get_initial(self): ...
    def get_value(self, dictionary: Any): ...
    def get_attribute(self, instance: Any): ...
    def get_default(self): ...
    def validate_empty_values(self, data: Any): ...
    def run_validation(self, data: Any = ...): ...
    def run_validators(self, value: Any) -> None: ...
    def to_internal_value(self, data: Any) -> None: ...
    def to_representation(self, value: Any) -> None: ...
    def fail(self, key: Any, **kwargs: Any) -> None: ...
    @property
    def root(self): ...
    @property
    def context(self): ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __deepcopy__(self, memo: Any): ...

class BooleanField(Field):
    default_error_messages: Any = ...
    default_empty_html: bool = ...
    initial: bool = ...
    TRUE_VALUES: Any = ...
    FALSE_VALUES: Any = ...
    NULL_VALUES: Any = ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class NullBooleanField(Field):
    default_error_messages: Any = ...
    initial: Any = ...
    TRUE_VALUES: Any = ...
    FALSE_VALUES: Any = ...
    NULL_VALUES: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class CharField(Field):
    default_error_messages: Any = ...
    initial: str = ...
    allow_blank: Any = ...
    trim_whitespace: Any = ...
    max_length: Any = ...
    min_length: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def run_validation(self, data: Any = ...): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class EmailField(CharField):
    default_error_messages: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RegexField(CharField):
    default_error_messages: Any = ...
    def __init__(self, regex: Any, **kwargs: Any) -> None: ...

class SlugField(CharField):
    default_error_messages: Any = ...
    allow_unicode: Any = ...
    def __init__(self, allow_unicode: bool = ..., **kwargs: Any) -> None: ...

class URLField(CharField):
    default_error_messages: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class UUIDField(Field):
    valid_formats: Any = ...
    default_error_messages: Any = ...
    uuid_format: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class IPAddressField(CharField):
    default_error_messages: Any = ...
    protocol: Any = ...
    unpack_ipv4: Any = ...
    def __init__(self, protocol: str = ..., **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...

class IntegerField(Field):
    default_error_messages: Any = ...
    MAX_STRING_LENGTH: int = ...
    re_decimal: Any = ...
    max_value: Any = ...
    min_value: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class FloatField(Field):
    default_error_messages: Any = ...
    MAX_STRING_LENGTH: int = ...
    max_value: Any = ...
    min_value: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class DecimalField(Field):
    default_error_messages: Any = ...
    MAX_STRING_LENGTH: int = ...
    max_digits: Any = ...
    decimal_places: Any = ...
    localize: Any = ...
    coerce_to_string: Any = ...
    max_value: Any = ...
    min_value: Any = ...
    max_whole_digits: Any = ...
    rounding: Any = ...
    def __init__(self, max_digits: Any, decimal_places: Any, coerce_to_string: Optional[Any] = ..., max_value: Optional[Any] = ..., min_value: Optional[Any] = ..., localize: bool = ..., rounding: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def validate_precision(self, value: Any): ...
    def to_representation(self, value: Any): ...
    def quantize(self, value: Any): ...

class DateTimeField(Field):
    default_error_messages: Any = ...
    datetime_parser: Any = ...
    format: Any = ...
    input_formats: Any = ...
    timezone: Any = ...
    def __init__(self, format: Any = ..., input_formats: Optional[Any] = ..., default_timezone: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def enforce_timezone(self, value: Any): ...
    def default_timezone(self): ...
    def to_internal_value(self, value: Any): ...
    def to_representation(self, value: Any): ...

class DateField(Field):
    default_error_messages: Any = ...
    datetime_parser: Any = ...
    format: Any = ...
    input_formats: Any = ...
    def __init__(self, format: Any = ..., input_formats: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, value: Any): ...
    def to_representation(self, value: Any): ...

class TimeField(Field):
    default_error_messages: Any = ...
    datetime_parser: Any = ...
    format: Any = ...
    input_formats: Any = ...
    def __init__(self, format: Any = ..., input_formats: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, value: Any): ...
    def to_representation(self, value: Any): ...

class DurationField(Field):
    default_error_messages: Any = ...
    max_value: Any = ...
    min_value: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def to_internal_value(self, value: Any): ...
    def to_representation(self, value: Any): ...

class ChoiceField(Field):
    default_error_messages: Any = ...
    html_cutoff: Any = ...
    html_cutoff_text: Any = ...
    choices: Any = ...
    allow_blank: Any = ...
    def __init__(self, choices: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...
    def iter_options(self): ...

class MultipleChoiceField(ChoiceField):
    default_error_messages: Any = ...
    default_empty_html: Any = ...
    allow_empty: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_value(self, dictionary: Any): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class FilePathField(ChoiceField):
    default_error_messages: Any = ...
    def __init__(self, path: Any, match: Optional[Any] = ..., recursive: bool = ..., allow_files: bool = ..., allow_folders: bool = ..., required: Optional[Any] = ..., **kwargs: Any) -> None: ...

class FileField(Field):
    default_error_messages: Any = ...
    max_length: Any = ...
    allow_empty_file: Any = ...
    use_url: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class ImageField(FileField):
    default_error_messages: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...

class _UnvalidatedField(Field):
    allow_blank: bool = ...
    allow_null: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class ListField(Field):
    child: Any = ...
    initial: Any = ...
    default_error_messages: Any = ...
    allow_empty: Any = ...
    max_length: Any = ...
    min_length: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_value(self, dictionary: Any): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, data: Any): ...
    def run_child_validation(self, data: Any): ...

class DictField(Field):
    child: Any = ...
    initial: Any = ...
    default_error_messages: Any = ...
    allow_empty: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_value(self, dictionary: Any): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...
    def run_child_validation(self, data: Any): ...

class HStoreField(DictField):
    child: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class JSONField(Field):
    default_error_messages: Any = ...
    binary: Any = ...
    encoder: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_value(self, dictionary: Any): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class ReadOnlyField(Field):
    def __init__(self, **kwargs: Any) -> None: ...
    def to_representation(self, value: Any): ...

class HiddenField(Field):
    def __init__(self, **kwargs: Any) -> None: ...
    def get_value(self, dictionary: Any): ...
    def to_internal_value(self, data: Any): ...

class SerializerMethodField(Field):
    method_name: Any = ...
    def __init__(self, method_name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def bind(self, field_name: Any, parent: Any) -> None: ...
    def to_representation(self, value: Any): ...

class ModelField(Field):
    default_error_messages: Any = ...
    model_field: Any = ...
    max_length: Any = ...
    def __init__(self, model_field: Any, **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def get_attribute(self, obj: Any): ...
    def to_representation(self, obj: Any): ...
