from collections import namedtuple
from django.utils.deprecation import RenameMethodsBase
from rest_framework import RemovedInDRF311Warning as RemovedInDRF311Warning, views as views
from rest_framework.response import Response as Response
from rest_framework.reverse import reverse as reverse
from rest_framework.schemas import SchemaGenerator as SchemaGenerator
from rest_framework.schemas.views import SchemaView as SchemaView
from rest_framework.settings import api_settings as api_settings
from rest_framework.urlpatterns import format_suffix_patterns as format_suffix_patterns
from typing import Any, Optional

Route = namedtuple('Route', ['url', 'mapping', 'name', 'detail', 'initkwargs'])

DynamicRoute = namedtuple('DynamicRoute', ['url', 'name', 'detail', 'initkwargs'])

def escape_curly_brackets(url_path: Any): ...
def flatten(list_of_lists: Any): ...

class RenameRouterMethods(RenameMethodsBase):
    renamed_methods: Any = ...

class BaseRouter(metaclass=RenameRouterMethods):
    registry: Any = ...
    def __init__(self) -> None: ...
    def register(self, prefix: Any, viewset: Any, basename: Optional[Any] = ..., base_name: Optional[Any] = ...) -> None: ...
    def get_default_basename(self, viewset: Any) -> None: ...
    def get_urls(self) -> None: ...
    @property
    def urls(self): ...

class SimpleRouter(BaseRouter):
    routes: Any = ...
    trailing_slash: Any = ...
    def __init__(self, trailing_slash: bool = ...) -> None: ...
    def get_default_basename(self, viewset: Any): ...
    def get_routes(self, viewset: Any): ...
    def get_method_map(self, viewset: Any, method_map: Any): ...
    def get_lookup_regex(self, viewset: Any, lookup_prefix: str = ...): ...
    def get_urls(self): ...

class APIRootView(views.APIView):
    schema: Any = ...
    api_root_dict: Any = ...
    def get(self, request: Any, *args: Any, **kwargs: Any): ...

class DefaultRouter(SimpleRouter):
    include_root_view: bool = ...
    include_format_suffixes: bool = ...
    root_view_name: str = ...
    default_schema_renderers: Any = ...
    APIRootView: Any = ...
    APISchemaView: Any = ...
    SchemaGenerator: Any = ...
    root_renderers: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_api_root_view(self, api_urls: Optional[Any] = ...): ...
    def get_urls(self): ...
