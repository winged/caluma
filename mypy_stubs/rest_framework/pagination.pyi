from collections import namedtuple
from rest_framework.compat import coreapi as coreapi, coreschema as coreschema
from rest_framework.exceptions import NotFound as NotFound
from rest_framework.response import Response as Response
from rest_framework.settings import api_settings as api_settings
from rest_framework.utils.urls import remove_query_param as remove_query_param, replace_query_param as replace_query_param
from typing import Any, Optional

Cursor = namedtuple('Cursor', ['offset', 'reverse', 'position'])

PageLink = namedtuple('PageLink', ['url', 'number', 'is_active', 'is_break'])
PAGE_BREAK: Any

class BasePagination:
    display_page_controls: bool = ...
    def paginate_queryset(self, queryset: Any, request: Any, view: Optional[Any] = ...) -> None: ...
    def get_paginated_response(self, data: Any) -> None: ...
    def get_paginated_response_schema(self, schema: Any): ...
    def to_html(self) -> None: ...
    def get_results(self, data: Any): ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...

class PageNumberPagination(BasePagination):
    page_size: Any = ...
    django_paginator_class: Any = ...
    page_query_param: str = ...
    page_query_description: Any = ...
    page_size_query_param: Any = ...
    page_size_query_description: Any = ...
    max_page_size: Any = ...
    last_page_strings: Any = ...
    template: str = ...
    invalid_page_message: Any = ...
    page: Any = ...
    display_page_controls: bool = ...
    request: Any = ...
    def paginate_queryset(self, queryset: Any, request: Any, view: Optional[Any] = ...): ...
    def get_paginated_response(self, data: Any): ...
    def get_paginated_response_schema(self, schema: Any): ...
    def get_page_size(self, request: Any): ...
    def get_next_link(self): ...
    def get_previous_link(self): ...
    def get_html_context(self): ...
    def to_html(self): ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...

class LimitOffsetPagination(BasePagination):
    default_limit: Any = ...
    limit_query_param: str = ...
    limit_query_description: Any = ...
    offset_query_param: str = ...
    offset_query_description: Any = ...
    max_limit: Any = ...
    template: str = ...
    count: Any = ...
    limit: Any = ...
    offset: Any = ...
    request: Any = ...
    display_page_controls: bool = ...
    def paginate_queryset(self, queryset: Any, request: Any, view: Optional[Any] = ...): ...
    def get_paginated_response(self, data: Any): ...
    def get_paginated_response_schema(self, schema: Any): ...
    def get_limit(self, request: Any): ...
    def get_offset(self, request: Any): ...
    def get_next_link(self): ...
    def get_previous_link(self): ...
    def get_html_context(self): ...
    def to_html(self): ...
    def get_count(self, queryset: Any): ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...

class CursorPagination(BasePagination):
    cursor_query_param: str = ...
    cursor_query_description: Any = ...
    page_size: Any = ...
    invalid_cursor_message: Any = ...
    ordering: str = ...
    template: str = ...
    page_size_query_param: Any = ...
    page_size_query_description: Any = ...
    max_page_size: Any = ...
    offset_cutoff: int = ...
    base_url: Any = ...
    cursor: Any = ...
    page: Any = ...
    has_next: Any = ...
    has_previous: Any = ...
    next_position: Any = ...
    previous_position: Any = ...
    display_page_controls: bool = ...
    def paginate_queryset(self, queryset: Any, request: Any, view: Optional[Any] = ...): ...
    def get_page_size(self, request: Any): ...
    def get_next_link(self): ...
    def get_previous_link(self): ...
    def get_ordering(self, request: Any, queryset: Any, view: Any): ...
    def decode_cursor(self, request: Any): ...
    def encode_cursor(self, cursor: Any): ...
    def get_paginated_response(self, data: Any): ...
    def get_paginated_response_schema(self, schema: Any): ...
    def get_html_context(self): ...
    def to_html(self): ...
    def get_schema_fields(self, view: Any): ...
    def get_schema_operation_parameters(self, view: Any): ...
