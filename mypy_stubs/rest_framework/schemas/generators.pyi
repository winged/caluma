from rest_framework import exceptions as exceptions
from rest_framework.compat import URLPattern as URLPattern, URLResolver as URLResolver, get_original_route as get_original_route
from rest_framework.request import clone_request as clone_request
from rest_framework.settings import api_settings as api_settings
from typing import Any, Optional

def get_pk_name(model: Any): ...
def is_api_view(callback: Any): ...
def endpoint_ordering(endpoint: Any): ...

class EndpointEnumerator:
    patterns: Any = ...
    def __init__(self, patterns: Optional[Any] = ..., urlconf: Optional[Any] = ...) -> None: ...
    def get_api_endpoints(self, patterns: Optional[Any] = ..., prefix: str = ...): ...
    def get_path_from_regex(self, path_regex: Any): ...
    def should_include_endpoint(self, path: Any, callback: Any): ...
    def get_allowed_methods(self, callback: Any): ...

class BaseSchemaGenerator:
    endpoint_inspector_cls: Any = ...
    coerce_path_pk: Any = ...
    patterns: Any = ...
    urlconf: Any = ...
    title: Any = ...
    description: Any = ...
    version: Any = ...
    url: Any = ...
    endpoints: Any = ...
    def __init__(self, title: Optional[Any] = ..., url: Optional[Any] = ..., description: Optional[Any] = ..., patterns: Optional[Any] = ..., urlconf: Optional[Any] = ..., version: str = ...) -> None: ...
    def create_view(self, callback: Any, method: Any, request: Optional[Any] = ...): ...
    def coerce_path(self, path: Any, method: Any, view: Any): ...
    def get_schema(self, request: Optional[Any] = ..., public: bool = ...) -> None: ...
    def has_view_permissions(self, path: Any, method: Any, view: Any): ...
