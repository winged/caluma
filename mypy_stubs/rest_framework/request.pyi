from rest_framework import HTTP_HEADER_ENCODING as HTTP_HEADER_ENCODING, exceptions as exceptions
from rest_framework.settings import api_settings as api_settings
from typing import Any, Optional

def is_form_media_type(media_type: Any): ...

class override_method:
    view: Any = ...
    request: Any = ...
    method: Any = ...
    action: Any = ...
    def __init__(self, view: Any, request: Any, method: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any, **kwarg: Any) -> None: ...

class WrappedAttributeError(Exception): ...

def wrap_attributeerrors() -> None: ...

class Empty: ...

def clone_request(request: Any, method: Any): ...

class ForcedAuthentication:
    force_user: Any = ...
    force_token: Any = ...
    def __init__(self, force_user: Any, force_token: Any) -> None: ...
    def authenticate(self, request: Any): ...

class Request:
    parsers: Any = ...
    authenticators: Any = ...
    negotiator: Any = ...
    parser_context: Any = ...
    def __init__(self, request: Any, parsers: Optional[Any] = ..., authenticators: Optional[Any] = ..., negotiator: Optional[Any] = ..., parser_context: Optional[Any] = ...) -> None: ...
    @property
    def content_type(self): ...
    @property
    def stream(self): ...
    @property
    def query_params(self): ...
    @property
    def data(self): ...
    @property
    def user(self): ...
    @user.setter
    def user(self, value: Any) -> None: ...
    @property
    def auth(self): ...
    @auth.setter
    def auth(self, value: Any) -> None: ...
    @property
    def successful_authenticator(self): ...
    def __getattr__(self, attr: Any): ...
    @property
    def DATA(self) -> None: ...
    @property
    def POST(self): ...
    @property
    def FILES(self): ...
    @property
    def QUERY_PARAMS(self) -> None: ...
    def force_plaintext_errors(self, value: Any): ...
