from rest_framework import exceptions as exceptions
from typing import Any

SAFE_METHODS: Any

class OperationHolderMixin:
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __rand__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __invert__(self): ...

class SingleOperandHolder(OperationHolderMixin):
    operator_class: Any = ...
    op1_class: Any = ...
    def __init__(self, operator_class: Any, op1_class: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class OperandHolder(OperationHolderMixin):
    operator_class: Any = ...
    op1_class: Any = ...
    op2_class: Any = ...
    def __init__(self, operator_class: Any, op1_class: Any, op2_class: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class AND:
    op1: Any = ...
    op2: Any = ...
    def __init__(self, op1: Any, op2: Any) -> None: ...
    def has_permission(self, request: Any, view: Any): ...
    def has_object_permission(self, request: Any, view: Any, obj: Any): ...

class OR:
    op1: Any = ...
    op2: Any = ...
    def __init__(self, op1: Any, op2: Any) -> None: ...
    def has_permission(self, request: Any, view: Any): ...
    def has_object_permission(self, request: Any, view: Any, obj: Any): ...

class NOT:
    op1: Any = ...
    def __init__(self, op1: Any) -> None: ...
    def has_permission(self, request: Any, view: Any): ...
    def has_object_permission(self, request: Any, view: Any, obj: Any): ...

class BasePermissionMetaclass(OperationHolderMixin, type): ...

class BasePermission(metaclass=BasePermissionMetaclass):
    def has_permission(self, request: Any, view: Any): ...
    def has_object_permission(self, request: Any, view: Any, obj: Any): ...

class AllowAny(BasePermission):
    def has_permission(self, request: Any, view: Any): ...

class IsAuthenticated(BasePermission):
    def has_permission(self, request: Any, view: Any): ...

class IsAdminUser(BasePermission):
    def has_permission(self, request: Any, view: Any): ...

class IsAuthenticatedOrReadOnly(BasePermission):
    def has_permission(self, request: Any, view: Any): ...

class DjangoModelPermissions(BasePermission):
    perms_map: Any = ...
    authenticated_users_only: bool = ...
    def get_required_permissions(self, method: Any, model_cls: Any): ...
    def has_permission(self, request: Any, view: Any): ...

class DjangoModelPermissionsOrAnonReadOnly(DjangoModelPermissions):
    authenticated_users_only: bool = ...

class DjangoObjectPermissions(DjangoModelPermissions):
    perms_map: Any = ...
    def get_required_object_permissions(self, method: Any, model_cls: Any): ...
    def has_object_permission(self, request: Any, view: Any, obj: Any): ...
