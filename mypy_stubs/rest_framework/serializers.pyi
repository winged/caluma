from rest_framework.compat import postgres_fields as postgres_fields
from rest_framework.exceptions import ErrorDetail as ErrorDetail, ValidationError as ValidationError
from rest_framework.fields import BooleanField as BooleanField, CharField as CharField, ChoiceField as ChoiceField, CreateOnlyDefault as CreateOnlyDefault, CurrentUserDefault as CurrentUserDefault, DateField as DateField, DateTimeField as DateTimeField, DecimalField as DecimalField, DictField as DictField, DurationField as DurationField, EmailField as EmailField, Field as Field, FileField as FileField, FilePathField as FilePathField, FloatField as FloatField, HStoreField as HStoreField, HiddenField as HiddenField, IPAddressField as IPAddressField, ImageField as ImageField, IntegerField as IntegerField, JSONField as JSONField, ListField as ListField, ModelField as ModelField, MultipleChoiceField as MultipleChoiceField, NullBooleanField as NullBooleanField, ReadOnlyField as ReadOnlyField, RegexField as RegexField, SerializerMethodField as SerializerMethodField, SkipField as SkipField, SlugField as SlugField, TimeField as TimeField, URLField as URLField, UUIDField as UUIDField, empty as empty, get_error_detail as get_error_detail, set_value as set_value
from rest_framework.relations import Hyperlink as Hyperlink, HyperlinkedIdentityField as HyperlinkedIdentityField, HyperlinkedRelatedField as HyperlinkedRelatedField, ManyRelatedField as ManyRelatedField, PKOnlyObject as PKOnlyObject, PrimaryKeyRelatedField as PrimaryKeyRelatedField, RelatedField as RelatedField, SlugRelatedField as SlugRelatedField, StringRelatedField as StringRelatedField
from rest_framework.settings import api_settings as api_settings
from rest_framework.utils import html as html, model_meta as model_meta, representation as representation
from rest_framework.utils.field_mapping import ClassLookupDict as ClassLookupDict, get_field_kwargs as get_field_kwargs, get_nested_relation_kwargs as get_nested_relation_kwargs, get_relation_kwargs as get_relation_kwargs, get_url_kwargs as get_url_kwargs
from rest_framework.utils.serializer_helpers import BindingDict as BindingDict, BoundField as BoundField, JSONBoundField as JSONBoundField, NestedBoundField as NestedBoundField, ReturnDict as ReturnDict, ReturnList as ReturnList
from rest_framework.validators import UniqueForDateValidator as UniqueForDateValidator, UniqueForMonthValidator as UniqueForMonthValidator, UniqueForYearValidator as UniqueForYearValidator, UniqueTogetherValidator as UniqueTogetherValidator
from typing import Any, Optional

LIST_SERIALIZER_KWARGS: Any
ALL_FIELDS: str

class BaseSerializer(Field):
    instance: Any = ...
    initial_data: Any = ...
    partial: Any = ...
    def __init__(self, instance: Optional[Any] = ..., data: Any = ..., **kwargs: Any) -> None: ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    @classmethod
    def many_init(cls, *args: Any, **kwargs: Any): ...
    def to_internal_value(self, data: Any) -> None: ...
    def to_representation(self, instance: Any) -> None: ...
    def update(self, instance: Any, validated_data: Any) -> None: ...
    def create(self, validated_data: Any) -> None: ...
    def save(self, **kwargs: Any): ...
    def is_valid(self, raise_exception: bool = ...): ...
    @property
    def data(self): ...
    @property
    def errors(self): ...
    @property
    def validated_data(self): ...

class SerializerMetaclass(type):
    def __new__(cls, name: Any, bases: Any, attrs: Any): ...

def as_serializer_error(exc: Any): ...

class Serializer(BaseSerializer, metaclass=SerializerMetaclass):
    default_error_messages: Any = ...
    def fields(self): ...
    def get_fields(self): ...
    def get_validators(self): ...
    def get_initial(self): ...
    def get_value(self, dictionary: Any): ...
    def run_validation(self, data: Any = ...): ...
    def run_validators(self, value: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, instance: Any): ...
    def validate(self, attrs: Any): ...
    def __iter__(self) -> Any: ...
    def __getitem__(self, key: Any): ...
    @property
    def data(self): ...
    @property
    def errors(self): ...

class ListSerializer(BaseSerializer):
    child: Any = ...
    many: bool = ...
    default_error_messages: Any = ...
    allow_empty: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_initial(self): ...
    def get_value(self, dictionary: Any): ...
    def run_validation(self, data: Any = ...): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, data: Any): ...
    def validate(self, attrs: Any): ...
    def update(self, instance: Any, validated_data: Any) -> None: ...
    def create(self, validated_data: Any): ...
    instance: Any = ...
    def save(self, **kwargs: Any): ...
    def is_valid(self, raise_exception: bool = ...): ...
    @property
    def data(self): ...
    @property
    def errors(self): ...

def raise_errors_on_nested_writes(method_name: Any, serializer: Any, validated_data: Any) -> None: ...

class ModelSerializer(Serializer):
    serializer_field_mapping: Any = ...
    serializer_related_field: Any = ...
    serializer_related_to_field: Any = ...
    serializer_url_field: Any = ...
    serializer_choice_field: Any = ...
    url_field_name: Any = ...
    def create(self, validated_data: Any): ...
    def update(self, instance: Any, validated_data: Any): ...
    def get_fields(self): ...
    def get_field_names(self, declared_fields: Any, info: Any): ...
    def get_default_field_names(self, declared_fields: Any, model_info: Any): ...
    def build_field(self, field_name: Any, info: Any, model_class: Any, nested_depth: Any): ...
    def build_standard_field(self, field_name: Any, model_field: Any): ...
    def build_relational_field(self, field_name: Any, relation_info: Any): ...
    def build_nested_field(self, field_name: Any, relation_info: Any, nested_depth: Any): ...
    def build_property_field(self, field_name: Any, model_class: Any): ...
    def build_url_field(self, field_name: Any, model_class: Any): ...
    def build_unknown_field(self, field_name: Any, model_class: Any) -> None: ...
    def include_extra_kwargs(self, kwargs: Any, extra_kwargs: Any): ...
    def get_extra_kwargs(self): ...
    def get_uniqueness_extra_kwargs(self, field_names: Any, declared_fields: Any, extra_kwargs: Any): ...
    def get_validators(self): ...
    def get_unique_together_validators(self): ...
    def get_unique_for_date_validators(self): ...

class HyperlinkedModelSerializer(ModelSerializer):
    serializer_related_field: Any = ...
    def get_default_field_names(self, declared_fields: Any, model_info: Any): ...
    def build_nested_field(self, field_name: Any, relation_info: Any, nested_depth: Any): ...
