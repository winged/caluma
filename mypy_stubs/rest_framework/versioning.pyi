from rest_framework import exceptions as exceptions
from rest_framework.compat import unicode_http_header as unicode_http_header
from rest_framework.settings import api_settings as api_settings
from rest_framework.templatetags.rest_framework import replace_query_param as replace_query_param
from typing import Any, Optional

class BaseVersioning:
    default_version: Any = ...
    allowed_versions: Any = ...
    version_param: Any = ...
    def determine_version(self, request: Any, *args: Any, **kwargs: Any) -> None: ...
    def reverse(self, viewname: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ..., request: Optional[Any] = ..., format: Optional[Any] = ..., **extra: Any): ...
    def is_allowed_version(self, version: Any): ...

class AcceptHeaderVersioning(BaseVersioning):
    invalid_version_message: Any = ...
    def determine_version(self, request: Any, *args: Any, **kwargs: Any): ...

class URLPathVersioning(BaseVersioning):
    invalid_version_message: Any = ...
    def determine_version(self, request: Any, *args: Any, **kwargs: Any): ...
    def reverse(self, viewname: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ..., request: Optional[Any] = ..., format: Optional[Any] = ..., **extra: Any): ...

class NamespaceVersioning(BaseVersioning):
    invalid_version_message: Any = ...
    def determine_version(self, request: Any, *args: Any, **kwargs: Any): ...
    def reverse(self, viewname: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ..., request: Optional[Any] = ..., format: Optional[Any] = ..., **extra: Any): ...
    def get_versioned_viewname(self, viewname: Any, request: Any): ...

class HostNameVersioning(BaseVersioning):
    hostname_regex: Any = ...
    invalid_version_message: Any = ...
    def determine_version(self, request: Any, *args: Any, **kwargs: Any): ...

class QueryParameterVersioning(BaseVersioning):
    invalid_version_message: Any = ...
    def determine_version(self, request: Any, *args: Any, **kwargs: Any): ...
    def reverse(self, viewname: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ..., request: Optional[Any] = ..., format: Optional[Any] = ..., **extra: Any): ...
