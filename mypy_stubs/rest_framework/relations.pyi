from rest_framework.fields import Field as Field, empty as empty, get_attribute as get_attribute, is_simple_callable as is_simple_callable, iter_options as iter_options
from rest_framework.reverse import reverse as reverse
from rest_framework.settings import api_settings as api_settings
from rest_framework.utils import html as html
from typing import Any, Optional

def method_overridden(method_name: Any, klass: Any, instance: Any): ...

class ObjectValueError(ValueError): ...
class ObjectTypeError(TypeError): ...

class Hyperlink(str):
    def __new__(self, url: Any, obj: Any): ...
    def __getnewargs__(self): ...
    @property
    def name(self): ...
    is_hyperlink: bool = ...

class PKOnlyObject:
    pk: Any = ...
    def __init__(self, pk: Any) -> None: ...

MANY_RELATION_KWARGS: Any

class RelatedField(Field):
    queryset: Any = ...
    html_cutoff: Any = ...
    html_cutoff_text: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    @classmethod
    def many_init(cls, *args: Any, **kwargs: Any): ...
    def run_validation(self, data: Any = ...): ...
    def get_queryset(self): ...
    def use_pk_only_optimization(self): ...
    def get_attribute(self, instance: Any): ...
    def get_choices(self, cutoff: Optional[Any] = ...): ...
    @property
    def choices(self): ...
    @property
    def grouped_choices(self): ...
    def iter_options(self): ...
    def display_value(self, instance: Any): ...

class StringRelatedField(RelatedField):
    def __init__(self, **kwargs: Any) -> None: ...
    def to_representation(self, value: Any): ...

class PrimaryKeyRelatedField(RelatedField):
    default_error_messages: Any = ...
    pk_field: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def use_pk_only_optimization(self): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class HyperlinkedRelatedField(RelatedField):
    lookup_field: str = ...
    view_name: Any = ...
    default_error_messages: Any = ...
    lookup_url_kwarg: Any = ...
    format: Any = ...
    reverse: Any = ...
    def __init__(self, view_name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def use_pk_only_optimization(self): ...
    def get_object(self, view_name: Any, view_args: Any, view_kwargs: Any): ...
    def get_url(self, obj: Any, view_name: Any, request: Any, format: Any): ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, value: Any): ...

class HyperlinkedIdentityField(HyperlinkedRelatedField):
    def __init__(self, view_name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def use_pk_only_optimization(self): ...

class SlugRelatedField(RelatedField):
    default_error_messages: Any = ...
    slug_field: Any = ...
    def __init__(self, slug_field: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def to_internal_value(self, data: Any): ...
    def to_representation(self, obj: Any): ...

class ManyRelatedField(Field):
    initial: Any = ...
    default_empty_html: Any = ...
    default_error_messages: Any = ...
    html_cutoff: Any = ...
    html_cutoff_text: Any = ...
    child_relation: Any = ...
    allow_empty: Any = ...
    def __init__(self, child_relation: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def get_value(self, dictionary: Any): ...
    def to_internal_value(self, data: Any): ...
    def get_attribute(self, instance: Any): ...
    def to_representation(self, iterable: Any): ...
    def get_choices(self, cutoff: Optional[Any] = ...): ...
    @property
    def choices(self): ...
    @property
    def grouped_choices(self): ...
    def iter_options(self): ...
