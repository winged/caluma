from ..types import ErrorType as ErrorType
from .converter import convert_form_field as convert_form_field
from graphene.relay.mutation import ClientIDMutation
from graphene.types.mutation import MutationOptions
from graphene_django.registry import get_global_registry as get_global_registry
from typing import Any, Optional

def fields_for_form(form: Any, only_fields: Any, exclude_fields: Any): ...

class BaseDjangoFormMutation(ClientIDMutation):
    class Meta:
        abstract: bool = ...
    @classmethod
    def mutate_and_get_payload(cls, root: Any, info: Any, **input: Any): ...
    @classmethod
    def get_form(cls, root: Any, info: Any, **input: Any): ...
    @classmethod
    def get_form_kwargs(cls, root: Any, info: Any, **input: Any): ...

class DjangoFormMutationOptions(MutationOptions):
    form_class: Any = ...

class DjangoFormMutation(BaseDjangoFormMutation):
    class Meta:
        abstract: bool = ...
    errors: Any = ...
    @classmethod
    def __init_subclass_with_meta__(cls, form_class: Optional[Any] = ..., only_fields: Any = ..., exclude_fields: Any = ..., **options: Any) -> None: ...
    @classmethod
    def perform_mutate(cls, form: Any, info: Any): ...

class DjangoModelDjangoFormMutationOptions(DjangoFormMutationOptions):
    model: Any = ...
    return_field_name: Any = ...

class DjangoModelFormMutation(BaseDjangoFormMutation):
    class Meta:
        abstract: bool = ...
    errors: Any = ...
    @classmethod
    def __init_subclass_with_meta__(cls, form_class: Optional[Any] = ..., model: Optional[Any] = ..., return_field_name: Optional[Any] = ..., only_fields: Any = ..., exclude_fields: Any = ..., **options: Any) -> None: ...
    @classmethod
    def perform_mutate(cls, form: Any, info: Any): ...
