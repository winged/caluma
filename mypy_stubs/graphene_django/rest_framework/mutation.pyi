from ..types import ErrorType as ErrorType
from .serializer_converter import convert_serializer_field as convert_serializer_field
from graphene.relay.mutation import ClientIDMutation
from graphene.types.mutation import MutationOptions
from typing import Any, Optional

class SerializerMutationOptions(MutationOptions):
    lookup_field: Any = ...
    model_class: Any = ...
    model_operations: Any = ...
    serializer_class: Any = ...

def fields_for_serializer(serializer: Any, only_fields: Any, exclude_fields: Any, is_input: bool = ...): ...

class SerializerMutation(ClientIDMutation):
    class Meta:
        abstract: bool = ...
    errors: Any = ...
    @classmethod
    def __init_subclass_with_meta__(cls, lookup_field: Optional[Any] = ..., serializer_class: Optional[Any] = ..., model_class: Optional[Any] = ..., model_operations: Any = ..., only_fields: Any = ..., exclude_fields: Any = ..., **options: Any) -> None: ...
    @classmethod
    def get_serializer_kwargs(cls, root: Any, info: Any, **input: Any): ...
    @classmethod
    def mutate_and_get_payload(cls, root: Any, info: Any, **input: Any): ...
    @classmethod
    def perform_mutate(cls, serializer: Any, info: Any): ...
