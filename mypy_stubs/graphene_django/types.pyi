from .converter import convert_django_field_with_choices as convert_django_field_with_choices
from .registry import Registry as Registry, get_global_registry as get_global_registry
from .settings import graphene_settings as graphene_settings
from .utils import DJANGO_FILTER_INSTALLED as DJANGO_FILTER_INSTALLED, camelize as camelize, get_model_fields as get_model_fields, is_valid_django_model as is_valid_django_model
from django.db.models import Model
from graphene.relay import Connection
from graphene.types.objecttype import ObjectType, ObjectTypeOptions
from typing import Any, Optional, Type

ALL_FIELDS: str

def construct_fields(model: Any, registry: Any, only_fields: Any, exclude_fields: Any, convert_choices_to_enum: Any): ...

class DjangoObjectTypeOptions(ObjectTypeOptions):
    model: Model = ...
    registry: Registry = ...
    connection: Type[Connection] = ...
    filter_fields: Any = ...
    filterset_class: Any = ...

class DjangoObjectType(ObjectType):
    @classmethod
    def __init_subclass_with_meta__(cls, model: Optional[Any] = ..., registry: Optional[Any] = ..., skip_registry: bool = ..., only_fields: Any = ..., fields: Any = ..., exclude_fields: Any = ..., exclude: Any = ..., filter_fields: Optional[Any] = ..., filterset_class: Optional[Any] = ..., connection: Optional[Any] = ..., connection_class: Optional[Any] = ..., use_connection: Optional[Any] = ..., interfaces: Any = ..., convert_choices_to_enum: bool = ..., _meta: Optional[Any] = ..., **options: Any) -> None: ...
    def resolve_id(self, info: Any): ...
    @classmethod
    def is_type_of(cls, root: Any, info: Any): ...
    @classmethod
    def get_queryset(cls, queryset: Any, info: Any): ...
    @classmethod
    def get_node(cls, info: Any, id: Any): ...

class ErrorType(ObjectType):
    field: Any = ...
    messages: Any = ...
    @classmethod
    def from_errors(cls, errors: Any): ...
