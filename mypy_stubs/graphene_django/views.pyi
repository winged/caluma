from .settings import graphene_settings as graphene_settings
from django.views.generic import View
from typing import Any, Optional

class HttpError(Exception):
    response: Any = ...
    message: Any = ...
    def __init__(self, response: Any, message: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...

def get_accepted_content_types(request: Any): ...
def instantiate_middleware(middlewares: Any) -> None: ...

class GraphQLView(View):
    graphiql_version: str = ...
    graphiql_template: str = ...
    react_version: str = ...
    schema: Any = ...
    graphiql: bool = ...
    executor: Any = ...
    backend: Any = ...
    middleware: Any = ...
    root_value: Any = ...
    pretty: bool = ...
    batch: bool = ...
    def __init__(self, schema: Optional[Any] = ..., executor: Optional[Any] = ..., middleware: Optional[Any] = ..., root_value: Optional[Any] = ..., graphiql: bool = ..., pretty: bool = ..., batch: bool = ..., backend: Optional[Any] = ...) -> None: ...
    def get_root_value(self, request: Any): ...
    def get_middleware(self, request: Any): ...
    def get_context(self, request: Any): ...
    def get_backend(self, request: Any): ...
    def dispatch(self, request: Any, *args: Any, **kwargs: Any): ...
    def get_response(self, request: Any, data: Any, show_graphiql: bool = ...): ...
    def render_graphiql(self, request: Any, **data: Any): ...
    def json_encode(self, request: Any, d: Any, pretty: bool = ...): ...
    def parse_body(self, request: Any): ...
    def execute_graphql_request(self, request: Any, data: Any, query: Any, variables: Any, operation_name: Any, show_graphiql: bool = ...): ...
    @classmethod
    def can_display_graphiql(cls, request: Any, data: Any): ...
    @classmethod
    def request_wants_html(cls, request: Any): ...
    @staticmethod
    def get_graphql_params(request: Any, data: Any): ...
    @staticmethod
    def format_error(error: Any): ...
    @staticmethod
    def get_content_type(request: Any): ...
