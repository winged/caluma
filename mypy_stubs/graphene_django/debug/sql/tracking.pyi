from .types import DjangoDebugSQL as DjangoDebugSQL
from threading import local
from typing import Any

class SQLQueryTriggered(Exception): ...

class ThreadLocalState(local):
    enabled: bool = ...
    def __init__(self) -> None: ...
    @property
    def Wrapper(self): ...
    def recording(self, v: Any) -> None: ...

state: Any
recording: Any

def wrap_cursor(connection: Any, panel: Any): ...
def unwrap_cursor(connection: Any) -> None: ...

class ExceptionCursorWrapper:
    def __init__(self, cursor: Any, db: Any, logger: Any) -> None: ...
    def __getattr__(self, attr: Any) -> None: ...

class NormalCursorWrapper:
    cursor: Any = ...
    db: Any = ...
    logger: Any = ...
    def __init__(self, cursor: Any, db: Any, logger: Any) -> None: ...
    def callproc(self, procname: Any, params: Any = ...): ...
    def execute(self, sql: Any, params: Any = ...): ...
    def executemany(self, sql: Any, param_list: Any): ...
    def __getattr__(self, attr: Any): ...
    def __iter__(self) -> Any: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
