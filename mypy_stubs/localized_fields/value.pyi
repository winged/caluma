from typing import Any, Optional

class LocalizedValue(dict):
    default_value: Any = ...
    def __init__(self, keys: dict=...) -> Any: ...
    def get(self, language: str=..., default: str=...) -> str: ...
    def set(self, language: str, value: str) -> Any: ...
    def deconstruct(self) -> dict: ...
    def translate(self) -> Optional[str]: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __setattr__(self, language: str, value: str) -> Any: ...

class LocalizedStringValue(LocalizedValue):
    default_value: str = ...

class LocalizedFileValue(LocalizedValue):
    def __getattr__(self, name: str) -> Any: ...
    def localized(self): ...

class LocalizedIntegerValue(LocalizedValue):
    default_value: Any = ...
    def translate(self): ...
    def __int__(self): ...
