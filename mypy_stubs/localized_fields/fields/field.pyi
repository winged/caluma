from ..descriptor import LocalizedValueDescriptor as LocalizedValueDescriptor
from ..forms import LocalizedFieldForm as LocalizedFieldForm
from ..value import LocalizedValue as LocalizedValue
from psqlextra.fields import HStoreField
from typing import Any, List, Optional, Union

class LocalizedField(HStoreField):
    Meta: Any = ...
    attr_class: Any = ...
    descriptor_class: Any = ...
    required: Any = ...
    def __init__(self, *args: Any, required: Union[bool, List[str]]=..., **kwargs: Any) -> Any: ...
    def contribute_to_class(self, model: Any, name: Any, **kwargs: Any) -> None: ...
    @classmethod
    def from_db_value(cls: Any, value: Any, *_: Any) -> Optional[LocalizedValue]: ...
    def to_python(self, value: Union[dict, str, None]) -> LocalizedValue: ...
    def get_prep_value(self, value: LocalizedValue) -> dict: ...
    def clean(self, value: Any, *_: Any): ...
    def validate(self, value: LocalizedValue, *_: Any) -> Any: ...
    def formfield(self, **kwargs: Any): ...
