from ..forms import LocalizedFileFieldForm as LocalizedFileFieldForm
from ..value import LocalizedFileValue as LocalizedFileValue
from django.db.models.fields.files import FieldFile
from localized_fields.fields import LocalizedField as LocalizedField
from localized_fields.fields.field import LocalizedValueDescriptor as LocalizedValueDescriptor
from localized_fields.value import LocalizedValue as LocalizedValue
from typing import Any, Optional

class LocalizedFieldFile(FieldFile):
    lang: Any = ...
    def __init__(self, instance: Any, field: Any, name: Any, lang: Any) -> None: ...
    name: Any = ...
    def save(self, name: Any, content: Any, save: bool = ...) -> None: ...
    def delete(self, save: bool = ...) -> None: ...

class LocalizedFileValueDescriptor(LocalizedValueDescriptor):
    def __get__(self, instance: Any, cls: Optional[Any] = ...): ...

class LocalizedFileField(LocalizedField):
    descriptor_class: Any = ...
    attr_class: Any = ...
    value_class: Any = ...
    storage: Any = ...
    upload_to: Any = ...
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., upload_to: str = ..., storage: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def deconstruct(self): ...
    def get_prep_value(self, value: Any): ...
    def pre_save(self, model_instance: Any, add: Any): ...
    def generate_filename(self, instance: Any, filename: Any, lang: Any): ...
    def save_form_data(self, instance: Any, data: Any) -> None: ...
    def formfield(self, **kwargs: Any): ...
    def value_to_string(self, obj: Any): ...
