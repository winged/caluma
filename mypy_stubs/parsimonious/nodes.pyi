from parsimonious.exceptions import UndefinedLabel as UndefinedLabel, VisitationError as VisitationError
from six import with_metaclass as with_metaclass
from typing import Any, Optional

class Node:
    expr: Any = ...
    full_text: Any = ...
    start: Any = ...
    end: Any = ...
    children: Any = ...
    def __init__(self, expr: Any, full_text: Any, start: Any, end: Any, children: Optional[Any] = ...) -> None: ...
    @property
    def expr_name(self): ...
    def __iter__(self) -> Any: ...
    @property
    def text(self): ...
    def prettily(self, error: Optional[Any] = ...): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class RegexNode(Node): ...

class RuleDecoratorMeta(type):
    def __new__(metaclass: Any, name: Any, bases: Any, namespace: Any): ...

class NodeVisitor(metaclass=RuleDecoratorMeta):
    grammar: Any = ...
    unwrapped_exceptions: Any = ...
    def visit(self, node: Any): ...
    def generic_visit(self, node: Any, visited_children: Any) -> None: ...
    def parse(self, text: Any, pos: int = ...): ...
    def match(self, text: Any, pos: int = ...): ...
    def lift_child(self, node: Any, children: Any): ...

def rule(rule_string: Any): ...
