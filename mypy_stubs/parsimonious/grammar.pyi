from collections import OrderedDict
from parsimonious.exceptions import BadGrammar as BadGrammar, UndefinedLabel as UndefinedLabel
from parsimonious.expressions import Literal as Literal, Lookahead as Lookahead, Not as Not, OneOf as OneOf, OneOrMore as OneOrMore, Optional as Optional, Regex as Regex, Sequence as Sequence, TokenMatcher as TokenMatcher, ZeroOrMore as ZeroOrMore, expression as expression
from parsimonious.nodes import NodeVisitor as NodeVisitor
from parsimonious.utils import evaluate_string as evaluate_string
from six import text_type
from typing import Any

class Grammar(OrderedDict):
    default_rule: Any = ...
    def __init__(self, rules: str = ..., **more_rules: Any) -> None: ...
    def default(self, rule_name: Any): ...
    def parse(self, text: Any, pos: int = ...): ...
    def match(self, text: Any, pos: int = ...): ...

class TokenGrammar(Grammar): ...
class BootstrappingGrammar(Grammar): ...

rule_syntax: str

class LazyReference(text_type):
    name: str = ...

class RuleVisitor(NodeVisitor):
    quantifier_classes: Any = ...
    visit_expression: Any = ...
    visit_term: Any = ...
    visit_atom: Any = ...
    custom_rules: Any = ...
    def __init__(self, custom_rules: Optional[Any] = ...) -> None: ...
    def visit_parenthesized(self, node: Any, parenthesized: Any): ...
    def visit_quantifier(self, node: Any, quantifier: Any): ...
    def visit_quantified(self, node: Any, quantified: Any): ...
    def visit_lookahead_term(self, node: Any, lookahead_term: Any): ...
    def visit_not_term(self, node: Any, not_term: Any): ...
    def visit_rule(self, node: Any, rule: Any): ...
    def visit_sequence(self, node: Any, sequence: Any): ...
    def visit_ored(self, node: Any, ored: Any): ...
    def visit_or_term(self, node: Any, or_term: Any): ...
    def visit_label(self, node: Any, label: Any): ...
    def visit_reference(self, node: Any, reference: Any): ...
    def visit_regex(self, node: Any, regex: Any): ...
    def visit_spaceless_literal(self, spaceless_literal: Any, visited_children: Any): ...
    def visit_literal(self, node: Any, literal: Any): ...
    def generic_visit(self, node: Any, visited_children: Any): ...
    def visit_rules(self, node: Any, rules_list: Any): ...

class TokenRuleVisitor(RuleVisitor):
    def visit_spaceless_literal(self, spaceless_literal: Any, visited_children: Any): ...
    def visit_regex(self, node: Any, regex: Any) -> None: ...

rule_grammar: Any
