from .conf import settings as settings
from .constants import ALL_FIELDS as ALL_FIELDS
from .filters import BaseInFilter as BaseInFilter, BaseRangeFilter as BaseRangeFilter, BooleanFilter as BooleanFilter, CharFilter as CharFilter, ChoiceFilter as ChoiceFilter, DateFilter as DateFilter, DateTimeFilter as DateTimeFilter, DurationFilter as DurationFilter, Filter as Filter, ModelChoiceFilter as ModelChoiceFilter, ModelMultipleChoiceFilter as ModelMultipleChoiceFilter, NumberFilter as NumberFilter, TimeFilter as TimeFilter, UUIDFilter as UUIDFilter
from .utils import get_all_model_fields as get_all_model_fields, get_model_field as get_model_field, resolve_field as resolve_field, try_dbfield as try_dbfield
from typing import Any, Optional

def remote_queryset(field: Any): ...

class FilterSetOptions:
    model: Any = ...
    fields: Any = ...
    exclude: Any = ...
    filter_overrides: Any = ...
    form: Any = ...
    def __init__(self, options: Optional[Any] = ...) -> None: ...

class FilterSetMetaclass(type):
    def __new__(cls, name: Any, bases: Any, attrs: Any): ...
    @classmethod
    def get_declared_filters(cls, bases: Any, attrs: Any): ...

FILTER_FOR_DBFIELD_DEFAULTS: Any

class BaseFilterSet:
    FILTER_DEFAULTS: Any = ...
    is_bound: Any = ...
    data: Any = ...
    queryset: Any = ...
    request: Any = ...
    form_prefix: Any = ...
    filters: Any = ...
    def __init__(self, data: Optional[Any] = ..., queryset: Optional[Any] = ..., *, request: Optional[Any] = ..., prefix: Optional[Any] = ...) -> None: ...
    def is_valid(self): ...
    @property
    def errors(self): ...
    def filter_queryset(self, queryset: Any): ...
    @property
    def qs(self): ...
    def get_form_class(self): ...
    @property
    def form(self): ...
    @classmethod
    def get_fields(cls): ...
    @classmethod
    def get_filter_name(cls, field_name: Any, lookup_expr: Any): ...
    @classmethod
    def get_filters(cls): ...
    @classmethod
    def filter_for_field(cls, field: Any, field_name: Any, lookup_expr: str = ...): ...
    @classmethod
    def filter_for_lookup(cls, field: Any, lookup_type: Any): ...

class FilterSet(BaseFilterSet, metaclass=FilterSetMetaclass): ...

def filterset_factory(model: Any, fields: Any = ...): ...
