from typing import Any, Optional

ETREE_EXCEPTIONS: Any

class MinioError(Exception):
    message: Any = ...
    def __init__(self, message: Any, **kwargs: Any) -> None: ...

class InvalidEndpointError(MinioError): ...
class InvalidBucketError(MinioError): ...
class InvalidArgumentError(MinioError): ...
class InvalidSizeError(MinioError): ...
class InvalidXMLError(MinioError): ...

class MultiDeleteError:
    object_name: Any = ...
    error_code: Any = ...
    error_message: Any = ...
    def __init__(self, object_name: Any, err_code: Any, err_message: Any) -> None: ...

class ResponseError(MinioError):
    method: Any = ...
    bucket_name: Any = ...
    object_name: Any = ...
    code: str = ...
    request_id: str = ...
    host_id: str = ...
    region: str = ...
    def __init__(self, response: Any, method: Any, bucket_name: Optional[Any] = ..., object_name: Optional[Any] = ...) -> None: ...
    def get_exception(self): ...

class KnownResponseError(MinioError):
    response_error: Any = ...
    def __init__(self, response_error: Any, **kwargs: Any) -> None: ...

class AccessDenied(KnownResponseError):
    message: str = ...

class AccountProblem(KnownResponseError):
    message: str = ...

class AmbiguousGrantByEmailAddress(KnownResponseError):
    message: str = ...

class BadDigest(KnownResponseError):
    message: str = ...

class BucketAlreadyExists(KnownResponseError):
    message: str = ...

class BucketAlreadyOwnedByYou(KnownResponseError):
    message: str = ...

class BucketNotEmpty(KnownResponseError):
    message: str = ...

class CredentialNotSupported(KnownResponseError):
    message: str = ...

class CrossLocationLoggingProhibited(KnownResponseError):
    message: str = ...

class EntityTooSmall(KnownResponseError):
    message: str = ...

class EntityTooLarge(KnownResponseError):
    message: str = ...

class ExpiredToken(KnownResponseError):
    message: str = ...

class IllegalVersioningConfigurationException(KnownResponseError):
    message: str = ...

class IncompleteBody(KnownResponseError):
    message: str = ...

class IncorrectNumberOfFilesInPostRequest(KnownResponseError):
    message: str = ...

class InlineDataTooLarge(KnownResponseError):
    message: str = ...

class InternalError(KnownResponseError):
    message: str = ...

class InvalidAccessKeyId(KnownResponseError):
    message: str = ...

class InvalidAddressingHeader(KnownResponseError):
    message: str = ...

class InvalidArgument(KnownResponseError):
    message: str = ...

class InvalidBucketName(KnownResponseError):
    message: str = ...

class InvalidBucketState(KnownResponseError):
    message: str = ...

class InvalidDigest(KnownResponseError):
    message: str = ...

class InvalidEncryptionAlgorithmError(KnownResponseError):
    message: str = ...

class InvalidLocationConstraint(KnownResponseError):
    message: str = ...

class InvalidObjectState(KnownResponseError):
    message: str = ...

class InvalidPart(KnownResponseError):
    message: str = ...

class InvalidPartOrder(KnownResponseError):
    message: str = ...

class InvalidPayer(KnownResponseError):
    message: str = ...

class InvalidPolicyDocument(KnownResponseError):
    message: str = ...

class InvalidRange(KnownResponseError):
    message: str = ...

class InvalidRequest(KnownResponseError):
    message: str = ...

class InvalidSecurity(KnownResponseError):
    message: str = ...

class InvalidSOAPRequest(KnownResponseError):
    message: str = ...

class InvalidStorageClass(KnownResponseError):
    message: str = ...

class InvalidTargetBucketForLogging(KnownResponseError):
    message: str = ...

class InvalidToken(KnownResponseError):
    message: str = ...

class InvalidURI(KnownResponseError):
    message: str = ...

class KeyTooLong(KnownResponseError):
    message: str = ...

class MalformedACLError(KnownResponseError):
    message: str = ...

class MalformedPOSTRequest(KnownResponseError):
    message: str = ...

class MalformedXML(KnownResponseError):
    message: str = ...

class MaxMessageLengthExceeded(KnownResponseError):
    message: str = ...

class MaxPostPreDataLengthExceededError(KnownResponseError):
    message: str = ...

class MetadataTooLarge(KnownResponseError):
    message: str = ...

class MethodNotAllowed(KnownResponseError):
    message: str = ...

class MissingAttachment(KnownResponseError):
    message: str = ...

class MissingContentLength(KnownResponseError):
    message: str = ...

class MissingRequestBodyError(KnownResponseError):
    message: str = ...

class MissingSecurityElement(KnownResponseError):
    message: str = ...

class MissingSecurityHeader(KnownResponseError):
    message: str = ...

class NoLoggingStatusForKey(KnownResponseError):
    message: str = ...

class NoSuchBucket(KnownResponseError):
    message: str = ...

class NoSuchKey(KnownResponseError):
    message: str = ...

class NoSuchLifecycleConfiguration(KnownResponseError):
    message: str = ...

class NoSuchUpload(KnownResponseError):
    message: str = ...

class NoSuchVersion(KnownResponseError):
    message: str = ...

class APINotImplemented(KnownResponseError):
    message: str = ...

class NotSignedUp(KnownResponseError):
    message: str = ...

class NoSuchBucketPolicy(KnownResponseError):
    message: str = ...

class OperationAborted(KnownResponseError):
    message: str = ...

class PermanentRedirect(KnownResponseError):
    message: str = ...

class PreconditionFailed(KnownResponseError):
    message: str = ...

class Redirect(KnownResponseError):
    message: str = ...

class RestoreAlreadyInProgress(KnownResponseError):
    message: str = ...

class RequestIsNotMultiPartContent(KnownResponseError):
    message: str = ...

class RequestTimeout(KnownResponseError):
    message: str = ...

class RequestTimeTooSkewed(KnownResponseError):
    message: str = ...

class RequestTorrentOfBucketError(KnownResponseError):
    message: str = ...

class SignatureDoesNotMatch(KnownResponseError):
    message: str = ...

class ServiceUnavailable(KnownResponseError):
    message: str = ...

class SlowDown(KnownResponseError):
    message: str = ...

class TemporaryRedirect(KnownResponseError):
    message: str = ...

class TokenRefreshRequired(KnownResponseError):
    message: str = ...

class TooManyBuckets(KnownResponseError):
    message: str = ...

class UnexpectedContent(KnownResponseError):
    message: str = ...

class UnresolvableGrantByEmailAddress(KnownResponseError):
    message: str = ...

class UserKeyMustBeSpecified(KnownResponseError):
    message: str = ...

known_errors: Any
