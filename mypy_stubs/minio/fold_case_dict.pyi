from typing import Any, Optional

class FoldCaseDict(dict):
    def __init__(self, dictionary: Any = ...) -> None: ...
    def __getitem__(self, item: Any): ...
    def __contains__(self, item: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def has_key(self, key: Any): ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def iteritems(self) -> None: ...
    def iterkeys(self) -> None: ...
    def itervalues(self) -> None: ...
    def update(self, dictionary: Any) -> None: ...
    def copy(self): ...
    def clear(self) -> None: ...
    def pop(self, key: Any): ...
    def popitem(self): ...
