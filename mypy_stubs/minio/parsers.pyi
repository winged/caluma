from .compat import urldecode as urldecode
from .definitions import Bucket as Bucket, CopyObjectResult as CopyObjectResult, IncompleteUpload as IncompleteUpload, MultipartUploadResult as MultipartUploadResult, Object as Object, UploadPart as UploadPart
from .error import ETREE_EXCEPTIONS as ETREE_EXCEPTIONS, InvalidXMLError as InvalidXMLError, MultiDeleteError as MultiDeleteError
from .xml_marshal import NOTIFICATIONS_ARN_FIELDNAME_MAP as NOTIFICATIONS_ARN_FIELDNAME_MAP
from typing import Any
from xml.etree.cElementTree import ParseError as ParseError

class S3Element:
    root_name: Any = ...
    element: Any = ...
    def __init__(self, root_name: Any, element: Any) -> None: ...
    @classmethod
    def fromstring(cls, root_name: Any, data: Any): ...
    def findall(self, name: Any): ...
    def find(self, name: Any): ...
    def get_child_text(self, name: Any, strict: bool = ...): ...
    def get_urldecoded_elem_text(self, name: Any, strict: bool = ...): ...
    def get_etag_elem(self, strict: bool = ...): ...
    def get_int_elem(self, name: Any): ...
    def get_localized_time_elem(self, name: Any): ...
    def text(self): ...
    def is_dir(self): ...

def parse_multipart_upload_result(data: Any): ...
def parse_copy_object(bucket_name: Any, object_name: Any, data: Any): ...
def parse_list_buckets(data: Any): ...
def parse_list_objects(data: Any, bucket_name: Any): ...
def parse_list_objects_v2(data: Any, bucket_name: Any): ...
def parse_list_multipart_uploads(data: Any, bucket_name: Any): ...
def parse_list_parts(data: Any, bucket_name: Any, object_name: Any, upload_id: Any): ...
def parse_new_multipart_upload(data: Any): ...
def parse_location_constraint(data: Any): ...
def parse_get_bucket_notification(data: Any): ...
def parse_multi_object_delete_response(data: Any): ...
