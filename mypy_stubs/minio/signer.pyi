from .compat import queryencode as queryencode, urlsplit as urlsplit
from .error import InvalidArgumentError as InvalidArgumentError
from .fold_case_dict import FoldCaseDict as FoldCaseDict
from .helpers import get_sha256_hexdigest as get_sha256_hexdigest
from typing import Any, Optional

def post_presign_signature(date: Any, region: Any, secret_key: Any, policy_str: Any): ...
def presign_v4(method: Any, url: Any, access_key: Any, secret_key: Any, session_token: Optional[Any] = ..., region: Optional[Any] = ..., headers: Optional[Any] = ..., expires: Optional[Any] = ..., response_headers: Optional[Any] = ..., request_date: Optional[Any] = ...): ...
def get_signed_headers(headers: Any): ...
def sign_v4(method: Any, url: Any, region: Any, headers: Optional[Any] = ..., access_key: Optional[Any] = ..., secret_key: Optional[Any] = ..., session_token: Optional[Any] = ..., content_sha256: Optional[Any] = ..., request_datetime: Optional[Any] = ...): ...
def generate_canonical_request(method: Any, parsed_url: Any, headers: Any, signed_headers: Any, content_sha256: Any): ...
def generate_string_to_sign(date: Any, region: Any, canonical_request: Any): ...
def generate_signing_key(date: Any, region: Any, secret_key: Any): ...
def generate_scope_string(date: Any, region: Any): ...
def generate_credential_string(access_key: Any, date: Any, region: Any): ...
def generate_authorization_header(access_key: Any, date: Any, region: Any, signed_headers: Any, signature: Any): ...
def remove_default_port(parsed_url: Any): ...
