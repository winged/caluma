from .compat import basestring as basestring, bytes as bytes, queryencode as queryencode, str as str, urlencode as urlencode, urlsplit as urlsplit
from .error import InvalidArgumentError as InvalidArgumentError, InvalidBucketError as InvalidBucketError, InvalidEndpointError as InvalidEndpointError
from typing import Any, Optional

MAX_MULTIPART_COUNT: int
MAX_MULTIPART_OBJECT_SIZE: Any
MAX_PART_SIZE: Any
MAX_POOL_SIZE: int
MIN_PART_SIZE: Any
DEFAULT_PART_SIZE = MIN_PART_SIZE

def get_s3_region_from_endpoint(endpoint: Any): ...
def dump_http(method: Any, url: Any, request_headers: Any, response: Any, output_stream: Any) -> None: ...
def mkdir_p(path: Any) -> None: ...

class PartMetadata:
    data: Any = ...
    md5_hex: Any = ...
    sha256_hex: Any = ...
    size: Any = ...
    def __init__(self, data: Any, md5_hex: Any, sha256_hex: Any, size: Any) -> None: ...

def read_full(data: Any, size: Any): ...

AWS_S3_ENDPOINT_MAP: Any

def get_s3_endpoint(region: Any): ...
def get_target_url(endpoint_url: Any, bucket_name: Optional[Any] = ..., object_name: Optional[Any] = ..., bucket_region: str = ..., query: Optional[Any] = ...): ...
def is_valid_endpoint(endpoint: Any): ...
def is_virtual_host(endpoint_url: Any, bucket_name: Any): ...
def is_valid_bucket_name(bucket_name: Any): ...
def is_non_empty_string(input_string: Any): ...
def is_valid_policy_type(policy: Any): ...
def is_valid_bucket_notification_config(notifications: Any): ...
def is_valid_sse_c_object(sse: Optional[Any] = ...) -> None: ...
def is_valid_sse_object(sse: Any) -> None: ...
def is_valid_source_sse_object(sse: Any) -> None: ...
def encode_object_name(object_name: Any): ...

class Hasher:
    h: Any = ...
    def __init__(self, data: Any, h: Any) -> None: ...
    @classmethod
    def md5(cls, data: str = ...): ...
    @classmethod
    def sha256(cls, data: str = ...): ...
    def update(self, data: Any) -> None: ...
    def hexdigest(self): ...
    def base64digest(self): ...

def get_sha256_hexdigest(content: Any): ...
def get_md5_base64digest(content: Any): ...
def optimal_part_info(length: Any, part_size: Any): ...
def amzprefix_user_metadata(metadata: Any): ...
def is_amz_header(key: Any): ...
def is_supported_header(key: Any): ...
def is_storageclass_header(key: Any): ...
