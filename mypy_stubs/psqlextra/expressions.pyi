from django.db.models import expressions
from typing import Any, Optional

class HStoreValue(expressions.Expression):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def resolve_expression(self, *args: Any, **kwargs: Any): ...
    def as_sql(self, compiler: Any, connection: Any): ...

class HStoreColumn(expressions.Col):
    contains_column_references: bool = ...
    def __init__(self, alias: Any, target: Any, hstore_key: Any) -> None: ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def relabeled_clone(self, relabels: Any): ...

class HStoreRef(expressions.F):
    key: Any = ...
    def __init__(self, name: str, key: str) -> Any: ...
    def resolve_expression(self, *args: Any, **kwargs: Any) -> HStoreColumn: ...

class NonGroupableFunc(expressions.Func):
    def get_group_by_cols(self): ...

class Min(NonGroupableFunc):
    def __init__(self, expression: Any) -> None: ...

class Max(NonGroupableFunc):
    def __init__(self, expression: Any) -> None: ...

class DateTimeEpochColumn(expressions.Col):
    contains_column_references: bool = ...
    def as_sql(self, compiler: Any, connection: Any): ...
    def get_group_by_cols(self): ...

class DateTimeEpoch(expressions.F):
    contains_aggregate: bool = ...
    def resolve_expression(self, *args: Any, **kwargs: Any): ...

def IsNotNone(*fields: Any, default: Optional[Any] = ...): ...
