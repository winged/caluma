from django.db import models
from psqlextra import signals as signals
from psqlextra.compiler import PostgresInsertCompiler as PostgresInsertCompiler, PostgresReturningUpdateCompiler as PostgresReturningUpdateCompiler
from psqlextra.query import ConflictAction as ConflictAction, PostgresInsertQuery as PostgresInsertQuery, PostgresQuery as PostgresQuery
from typing import Any, Dict, Iterable, List, Optional, Tuple, Union

class PostgresQuerySet(models.QuerySet):
    query: Any = ...
    conflict_target: Any = ...
    conflict_action: Any = ...
    index_predicate: Any = ...
    def __init__(self, model: Optional[Any] = ..., query: Optional[Any] = ..., using: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def annotate(self, **annotations: Any): ...
    def rename_annotations(self, **annotations: Any): ...
    def join(self, **conditions: Any): ...
    def update(self, **fields: Any): ...
    def on_conflict(self, fields: List[Union[str, Tuple[str]]], action: Any, index_predicate: str=...) -> Any: ...
    def bulk_insert(self, rows: Any, return_model: bool = ...): ...
    def insert(self, **fields: Any): ...
    def insert_and_get(self, **fields: Any): ...
    def upsert(self, conflict_target: List, fields: Dict, index_predicate: str=...) -> int: ...
    def upsert_and_get(self, conflict_target: List, fields: Dict, index_predicate: str=...) -> Any: ...
    def bulk_upsert(self, conflict_target: List, rows: Iterable[Dict], index_predicate: str=..., return_model: bool=...) -> Any: ...

class PostgresManager(models.Manager):
    use_in_migrations: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __del__(self) -> None: ...
    def get_queryset(self): ...
    def on_conflict(self, fields: List[Union[str, Tuple[str]]], action: Any, index_predicate: str=...) -> Any: ...
    def upsert(self, conflict_target: List, fields: Dict, index_predicate: str=...) -> int: ...
    def upsert_and_get(self, conflict_target: List, fields: Dict, index_predicate: str=...) -> Any: ...
    def bulk_upsert(self, conflict_target: List, rows: Iterable[Dict], index_predicate: str=..., return_model: bool=...) -> Any: ...
