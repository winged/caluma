from typing import Any, Optional

class CycleDetected(Exception): ...

class Request:
    deferred: Any = ...
    results: Any = ...
    model_factories: Any = ...
    in_progress: Any = ...
    def __init__(self) -> None: ...
    def defer(self, functions: Any) -> None: ...
    def get_deps(self, request: Any, fixture: Any, deps: Optional[Any] = ...): ...
    def get_current_deps(self, request: Any): ...
    def execute(self, request: Any, function: Any, deferred: Any) -> None: ...
    def after_postgeneration(self, request: Any) -> None: ...
    def evaluate(self, request: Any) -> None: ...

def factoryboy_request(): ...
def pytest_runtest_call(item: Any) -> None: ...
def pytest_addhooks(pluginmanager: Any) -> None: ...
def pytest_generate_tests(metafunc: Any) -> None: ...
