from typing import Any, Optional

SEPARATOR: str
FIXTURE_FUNC_FORMAT: str

def make_fixture(name: Any, module: Any, func: Any, args: Optional[Any] = ..., related: Optional[Any] = ..., **kwargs: Any): ...
def register(factory_class: Any, _name: Optional[Any] = ..., **kwargs: Any): ...
def get_model_name(factory_class: Any): ...
def get_factory_name(factory_class: Any): ...
def get_deps(factory_class: Any, parent_factory_class: Optional[Any] = ..., model_name: Optional[Any] = ...): ...
def evaluate(request: Any, value: Any): ...
def model_fixture(request: Any, factory_name: Any): ...
def make_deferred_related(factory: Any, fixture: Any, attr: Any): ...
def make_deferred_postgen(step: Any, factory_class: Any, fixture: Any, instance: Any, attr: Any, declaration: Any, context: Any): ...
def factory_fixture(request: Any, factory_class: Any): ...
def attr_fixture(request: Any, value: Any): ...
def subfactory_fixture(request: Any, factory_class: Any): ...
def get_caller_module(depth: int = ...): ...

class LazyFixture:
    fixture: Any = ...
    args: Any = ...
    def __init__(self, fixture: Any) -> None: ...
    def evaluate(self, request: Any): ...
