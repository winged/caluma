from . import compat as compat, declarations as declarations, random as random
from typing import Any, Optional

random_seed_warning: str

def get_random_state(): ...
def set_random_state(state: Any): ...
def reseed_random(seed: Any) -> None: ...

class BaseFuzzyAttribute(declarations.BaseDeclaration):
    def fuzz(self) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class FuzzyAttribute(BaseFuzzyAttribute):
    fuzzer: Any = ...
    def __init__(self, fuzzer: Any, **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyText(BaseFuzzyAttribute):
    prefix: Any = ...
    suffix: Any = ...
    length: Any = ...
    chars: Any = ...
    def __init__(self, prefix: str = ..., length: int = ..., suffix: str = ..., chars: Any = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyChoice(BaseFuzzyAttribute):
    choices: Any = ...
    choices_generator: Any = ...
    getter: Any = ...
    def __init__(self, choices: Any, getter: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyInteger(BaseFuzzyAttribute):
    low: Any = ...
    high: Any = ...
    step: Any = ...
    def __init__(self, low: Any, high: Optional[Any] = ..., step: int = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyDecimal(BaseFuzzyAttribute):
    low: Any = ...
    high: Any = ...
    precision: Any = ...
    def __init__(self, low: Any, high: Optional[Any] = ..., precision: int = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyFloat(BaseFuzzyAttribute):
    low: Any = ...
    high: Any = ...
    precision: Any = ...
    def __init__(self, low: Any, high: Optional[Any] = ..., precision: int = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyDate(BaseFuzzyAttribute):
    start_date: Any = ...
    end_date: Any = ...
    def __init__(self, start_date: Any, end_date: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class BaseFuzzyDateTime(BaseFuzzyAttribute):
    start_dt: Any = ...
    end_dt: Any = ...
    force_year: Any = ...
    force_month: Any = ...
    force_day: Any = ...
    force_hour: Any = ...
    force_minute: Any = ...
    force_second: Any = ...
    force_microsecond: Any = ...
    def __init__(self, start_dt: Any, end_dt: Optional[Any] = ..., force_year: Optional[Any] = ..., force_month: Optional[Any] = ..., force_day: Optional[Any] = ..., force_hour: Optional[Any] = ..., force_minute: Optional[Any] = ..., force_second: Optional[Any] = ..., force_microsecond: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def fuzz(self): ...

class FuzzyNaiveDateTime(BaseFuzzyDateTime): ...
class FuzzyDateTime(BaseFuzzyDateTime): ...
