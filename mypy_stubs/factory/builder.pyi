from . import declarations as declarations, enums as enums, errors as errors, utils as utils
from collections import namedtuple
from typing import Any, Optional

DeclarationWithContext = namedtuple('DeclarationWithContext', ['name', 'declaration', 'context'])

PostGenerationContext = namedtuple('PostGenerationContext', ['value_provided', 'value', 'extra'])

class DeclarationSet:
    declarations: Any = ...
    contexts: Any = ...
    def __init__(self, initial: Optional[Any] = ...) -> None: ...
    @classmethod
    def split(cls, entry: Any): ...
    @classmethod
    def join(cls, root: Any, subkey: Any): ...
    def copy(self): ...
    def update(self, values: Any) -> None: ...
    def filter(self, entries: Any): ...
    def sorted(self): ...
    def __contains__(self, key: Any): ...
    def __getitem__(self, key: Any): ...
    def __iter__(self) -> Any: ...
    def values(self) -> None: ...
    def as_dict(self): ...

class FakePostGenerationDeclaration(declarations.PostGenerationDeclaration):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def call(self, instance: Any, step: Any, context: Any): ...

def parse_declarations(decls: Any, base_pre: Optional[Any] = ..., base_post: Optional[Any] = ...): ...

class BuildStep:
    builder: Any = ...
    sequence: Any = ...
    attributes: Any = ...
    parent_step: Any = ...
    stub: Any = ...
    def __init__(self, builder: Any, sequence: Any, parent_step: Optional[Any] = ...) -> None: ...
    def resolve(self, declarations: Any) -> None: ...
    @property
    def chain(self): ...
    def recurse(self, factory: Any, declarations: Any, force_sequence: Optional[Any] = ...): ...

class StepBuilder:
    factory_meta: Any = ...
    strategy: Any = ...
    extras: Any = ...
    force_init_sequence: Any = ...
    def __init__(self, factory_meta: Any, extras: Any, strategy: Any) -> None: ...
    def build(self, parent_step: Optional[Any] = ..., force_sequence: Optional[Any] = ...): ...
    def recurse(self, factory_meta: Any, extras: Any): ...

class Resolver:
    def __init__(self, declarations: Any, step: Any, sequence: Any) -> None: ...
    @property
    def factory_parent(self): ...
    def __getattr__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any): ...
