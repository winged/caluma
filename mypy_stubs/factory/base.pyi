from . import builder as builder, declarations as declarations, enums as enums, errors as errors, utils as utils
from typing import Any, Optional

logger: Any

def get_factory_bases(bases: Any): ...
def resolve_attribute(name: Any, bases: Any, default: Optional[Any] = ...): ...

class FactoryMetaClass(type):
    def __call__(cls, **kwargs: Any): ...
    def __new__(mcs: Any, class_name: Any, bases: Any, attrs: Any): ...

class BaseMeta:
    abstract: bool = ...
    strategy: Any = ...

class OptionDefault:
    name: Any = ...
    value: Any = ...
    inherit: Any = ...
    checker: Any = ...
    def __init__(self, name: Any, value: Any, inherit: bool = ..., checker: Optional[Any] = ...) -> None: ...
    def apply(self, meta: Any, base_meta: Any): ...

class FactoryOptions:
    factory: Any = ...
    base_factory: Any = ...
    base_declarations: Any = ...
    parameters: Any = ...
    parameters_dependencies: Any = ...
    pre_declarations: Any = ...
    post_declarations: Any = ...
    counter_reference: Any = ...
    def __init__(self) -> None: ...
    @property
    def declarations(self): ...
    model: Any = ...
    abstract: bool = ...
    def contribute_to_class(self, factory: Any, meta: Optional[Any] = ..., base_meta: Optional[Any] = ..., base_factory: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def next_sequence(self): ...
    def reset_sequence(self, value: Optional[Any] = ..., force: bool = ...) -> None: ...
    def prepare_arguments(self, attributes: Any): ...
    def instantiate(self, step: Any, args: Any, kwargs: Any): ...
    def use_postgeneration_results(self, step: Any, instance: Any, results: Any) -> None: ...
    def get_model_class(self): ...

class _Counter:
    seq: Any = ...
    def __init__(self, seq: Any) -> None: ...
    def next(self): ...
    def reset(self, next_value: int = ...) -> None: ...

class BaseFactory:
    UnknownStrategy: Any = ...
    UnsupportedStrategy: Any = ...
    def __new__(cls, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def reset_sequence(cls, value: Optional[Any] = ..., force: bool = ...) -> None: ...
    @classmethod
    def attributes(cls, create: bool = ..., extra: Optional[Any] = ...): ...
    @classmethod
    def declarations(cls, extra_defs: Optional[Any] = ...): ...
    @classmethod
    def build(cls, **kwargs: Any): ...
    @classmethod
    def build_batch(cls, size: Any, **kwargs: Any): ...
    @classmethod
    def create(cls, **kwargs: Any): ...
    @classmethod
    def create_batch(cls, size: Any, **kwargs: Any): ...
    @classmethod
    def stub(cls, **kwargs: Any): ...
    @classmethod
    def stub_batch(cls, size: Any, **kwargs: Any): ...
    @classmethod
    def generate(cls, strategy: Any, **kwargs: Any): ...
    @classmethod
    def generate_batch(cls, strategy: Any, size: Any, **kwargs: Any): ...
    @classmethod
    def simple_generate(cls, create: Any, **kwargs: Any): ...
    @classmethod
    def simple_generate_batch(cls, create: Any, size: Any, **kwargs: Any): ...

Factory: Any

class StubObject:
    def __init__(self, **kwargs: Any) -> None: ...

class StubFactory(Factory):
    class Meta:
        strategy: Any = ...
        model: Any = ...
    @classmethod
    def build(cls, **kwargs: Any): ...
    @classmethod
    def create(cls, **kwargs: Any) -> None: ...

class BaseDictFactory(Factory):
    class Meta:
        abstract: bool = ...

class DictFactory(BaseDictFactory):
    class Meta:
        model: Any = ...

class BaseListFactory(Factory):
    class Meta:
        abstract: bool = ...

class ListFactory(BaseListFactory):
    class Meta:
        model: Any = ...

def use_strategy(new_strategy: Any): ...
