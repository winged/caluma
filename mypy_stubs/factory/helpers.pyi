from . import base as base, declarations as declarations
from typing import Any, Optional

def debug(logger: str = ..., stream: Optional[Any] = ...) -> None: ...
def make_factory(klass: Any, **kwargs: Any): ...
def build(klass: Any, **kwargs: Any): ...
def build_batch(klass: Any, size: Any, **kwargs: Any): ...
def create(klass: Any, **kwargs: Any): ...
def create_batch(klass: Any, size: Any, **kwargs: Any): ...
def stub(klass: Any, **kwargs: Any): ...
def stub_batch(klass: Any, size: Any, **kwargs: Any): ...
def generate(klass: Any, strategy: Any, **kwargs: Any): ...
def generate_batch(klass: Any, strategy: Any, size: Any, **kwargs: Any): ...
def simple_generate(klass: Any, create: Any, **kwargs: Any): ...
def simple_generate_batch(klass: Any, create: Any, size: Any, **kwargs: Any): ...
def lazy_attribute(func: Any): ...
def iterator(func: Any): ...
def sequence(func: Any): ...
def lazy_attribute_sequence(func: Any): ...
def container_attribute(func: Any): ...
def post_generation(fun: Any): ...
