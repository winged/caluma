from . import compat as compat, enums as enums, errors as errors, utils as utils
from typing import Any, Optional

logger: Any

class BaseDeclaration(utils.OrderedBase):
    FACTORY_BUILDER_PHASE: Any = ...
    UNROLL_CONTEXT_BEFORE_EVALUATION: bool = ...
    def unroll_context(self, instance: Any, step: Any, context: Any): ...
    def evaluate(self, instance: Any, step: Any, extra: Any) -> None: ...

class OrderedDeclaration(BaseDeclaration): ...

class LazyFunction(BaseDeclaration):
    function: Any = ...
    def __init__(self, function: Any, *args: Any, **kwargs: Any) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class LazyAttribute(BaseDeclaration):
    function: Any = ...
    def __init__(self, function: Any, *args: Any, **kwargs: Any) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class _UNSPECIFIED: ...

def deepgetattr(obj: Any, name: Any, default: Any = ...): ...

class SelfAttribute(BaseDeclaration):
    depth: Any = ...
    attribute_name: Any = ...
    default: Any = ...
    def __init__(self, attribute_name: Any, default: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class Iterator(BaseDeclaration):
    getter: Any = ...
    iterator: Any = ...
    iterator_builder: Any = ...
    def __init__(self, iterator: Any, cycle: bool = ..., getter: Optional[Any] = ...) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...
    def reset(self) -> None: ...

class Sequence(BaseDeclaration):
    function: Any = ...
    def __init__(self, function: Any) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class LazyAttributeSequence(Sequence):
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class ContainerAttribute(BaseDeclaration):
    function: Any = ...
    strict: Any = ...
    def __init__(self, function: Any, strict: bool = ..., *args: Any, **kwargs: Any) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class ParameteredAttribute(BaseDeclaration):
    CONTAINERS_FIELD: str = ...
    EXTEND_CONTAINERS: bool = ...
    defaults: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...
    def generate(self, step: Any, params: Any) -> None: ...

class _FactoryWrapper:
    factory: Any = ...
    module: str = ...
    def __init__(self, factory_or_path: Any) -> None: ...
    def get(self): ...

class SubFactory(ParameteredAttribute):
    EXTEND_CONTAINERS: bool = ...
    FORCE_SEQUENCE: bool = ...
    UNROLL_CONTEXT_BEFORE_EVALUATION: bool = ...
    factory_wrapper: Any = ...
    def __init__(self, factory: Any, **kwargs: Any) -> None: ...
    def get_factory(self): ...
    def generate(self, step: Any, params: Any): ...

class Dict(SubFactory):
    FORCE_SEQUENCE: bool = ...
    def __init__(self, params: Any, dict_factory: str = ...) -> None: ...

class List(SubFactory):
    FORCE_SEQUENCE: bool = ...
    def __init__(self, params: Any, list_factory: str = ...) -> None: ...

class Skip:
    def __bool__(self): ...
    __nonzero__: Any = ...

SKIP: Any

class Maybe(BaseDeclaration):
    FACTORY_BUILDER_PHASE: Any = ...
    decider: Any = ...
    yes: Any = ...
    no: Any = ...
    def __init__(self, decider: Any, yes_declaration: Any = ..., no_declaration: Any = ...) -> None: ...
    def call(self, instance: Any, step: Any, context: Any): ...
    def evaluate(self, instance: Any, step: Any, extra: Any): ...

class Parameter(utils.OrderedBase):
    def as_declarations(self, field_name: Any, declarations: Any) -> None: ...
    def get_revdeps(self, parameters: Any): ...

class SimpleParameter(Parameter):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def as_declarations(self, field_name: Any, declarations: Any): ...
    @classmethod
    def wrap(cls, value: Any): ...

class Trait(Parameter):
    overrides: Any = ...
    def __init__(self, **overrides: Any) -> None: ...
    def as_declarations(self, field_name: Any, declarations: Any): ...
    def get_revdeps(self, parameters: Any): ...

class PostGenerationDeclaration(BaseDeclaration):
    FACTORY_BUILDER_PHASE: Any = ...
    def call(self, instance: Any, step: Any, context: Any) -> None: ...

class PostGeneration(PostGenerationDeclaration):
    function: Any = ...
    def __init__(self, function: Any) -> None: ...
    def call(self, instance: Any, step: Any, context: Any): ...

class RelatedFactory(PostGenerationDeclaration):
    UNROLL_CONTEXT_BEFORE_EVALUATION: bool = ...
    name: Any = ...
    defaults: Any = ...
    factory_wrapper: Any = ...
    def __init__(self, factory: Any, factory_related_name: str = ..., **defaults: Any) -> None: ...
    def get_factory(self): ...
    def call(self, instance: Any, step: Any, context: Any): ...

class RelatedFactoryList(RelatedFactory):
    size: Any = ...
    def __init__(self, factory: Any, factory_related_name: str = ..., size: int = ..., **defaults: Any) -> None: ...
    def call(self, instance: Any, step: Any, context: Any): ...

class NotProvided: ...

class PostGenerationMethodCall(PostGenerationDeclaration):
    method_name: Any = ...
    method_arg: Any = ...
    method_kwargs: Any = ...
    def __init__(self, method_name: Any, *args: Any, **kwargs: Any) -> None: ...
    def call(self, instance: Any, step: Any, context: Any): ...
