from typing import Any, Optional

def signature(obj: Any): ...

class _void: ...
class _empty: ...

class _ParameterKind(int):
    def __new__(self, *args: Any, **kwargs: Any): ...

class Parameter:
    POSITIONAL_ONLY: Any = ...
    POSITIONAL_OR_KEYWORD: Any = ...
    VAR_POSITIONAL: Any = ...
    KEYWORD_ONLY: Any = ...
    VAR_KEYWORD: Any = ...
    empty: Any = ...
    def __init__(self, name: Any, kind: Any, default: Any = ..., annotation: Any = ..., _partial_kwarg: bool = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def default(self): ...
    @property
    def annotation(self): ...
    @property
    def kind(self): ...
    def replace(self, name: Any = ..., kind: Any = ..., annotation: Any = ..., default: Any = ..., _partial_kwarg: Any = ...): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class BoundArguments:
    arguments: Any = ...
    def __init__(self, signature: Any, arguments: Any) -> None: ...
    @property
    def signature(self): ...
    @property
    def args(self): ...
    @property
    def kwargs(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class Signature:
    empty: Any = ...
    def __init__(self, parameters: Optional[Any] = ..., return_annotation: Any = ..., __validate_parameters__: bool = ...) -> None: ...
    @classmethod
    def from_function(cls, func: Any): ...
    @property
    def parameters(self): ...
    @property
    def return_annotation(self): ...
    def replace(self, parameters: Any = ..., return_annotation: Any = ...): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def bind(self, *args: Any, **kwargs: Any): ...
    def bind_partial(self, *args: Any, **kwargs: Any): ...
