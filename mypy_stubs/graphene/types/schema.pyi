from .definitions import GrapheneGraphQLType as GrapheneGraphQLType
from .objecttype import ObjectType as ObjectType
from .typemap import TypeMap as TypeMap, is_graphene_type as is_graphene_type
from graphql import GraphQLSchema
from typing import Any, Optional

def assert_valid_root_type(_type: Any) -> None: ...

class Schema(GraphQLSchema):
    types: Any = ...
    auto_camelcase: Any = ...
    def __init__(self, query: Optional[Any] = ..., mutation: Optional[Any] = ..., subscription: Optional[Any] = ..., directives: Optional[Any] = ..., types: Optional[Any] = ..., auto_camelcase: bool = ...) -> None: ...
    def get_query_type(self): ...
    def get_mutation_type(self): ...
    def get_subscription_type(self): ...
    def __getattr__(self, type_name: Any): ...
    def get_graphql_type(self, _type: Any): ...
    def execute(self, *args: Any, **kwargs: Any): ...
    def introspect(self): ...
    def lazy(self, _type: Any): ...
    def build_typemap(self) -> None: ...
