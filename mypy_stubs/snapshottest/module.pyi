from .error import SnapshotNotFound as SnapshotNotFound
from .formatter import Formatter as Formatter
from .snapshot import Snapshot as Snapshot
from typing import Any

logger: Any

class SnapshotModule:
    module: Any = ...
    filepath: Any = ...
    imports: Any = ...
    visited_snapshots: Any = ...
    new_snapshots: Any = ...
    failed_snapshots: Any = ...
    def __init__(self, module: Any, filepath: Any) -> None: ...
    def load_snapshots(self): ...
    def visit(self, snapshot_name: Any) -> None: ...
    def delete_unvisited(self) -> None: ...
    @property
    def unvisited_snapshots(self): ...
    @classmethod
    def total_unvisited_snapshots(cls): ...
    @classmethod
    def get_modules(cls): ...
    @classmethod
    def stats_for_module(cls, getter: Any): ...
    @classmethod
    def stats_unvisited_snapshots(cls): ...
    @classmethod
    def stats_visited_snapshots(cls): ...
    @classmethod
    def stats_new_snapshots(cls): ...
    @classmethod
    def stats_failed_snapshots(cls): ...
    @classmethod
    def stats_successful_snapshots(cls): ...
    @classmethod
    def has_snapshots(cls): ...
    @property
    def original_snapshot(self): ...
    @property
    def snapshots(self): ...
    def __getitem__(self, test_name: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def mark_failed(self, key: Any): ...
    @property
    def snapshot_dir(self): ...
    def save(self) -> None: ...
    @classmethod
    def get_module_for_testpath(cls, test_filepath: Any): ...

class SnapshotTest:
    curr_snapshot: str = ...
    snapshot_counter: int = ...
    def __init__(self) -> None: ...
    @property
    def module(self) -> None: ...
    @property
    def update(self): ...
    @property
    def test_name(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, tb: Any) -> None: ...
    def visit(self) -> None: ...
    def fail(self) -> None: ...
    def store(self, data: Any) -> None: ...
    def assert_value_matches_snapshot(self, test_value: Any, snapshot_value: Any) -> None: ...
    def assert_equals(self, value: Any, snapshot: Any) -> None: ...
    def assert_match(self, value: Any, name: str = ...) -> None: ...
    def save_changes(self) -> None: ...

def assert_match_snapshot(value: Any, name: str = ...) -> None: ...
